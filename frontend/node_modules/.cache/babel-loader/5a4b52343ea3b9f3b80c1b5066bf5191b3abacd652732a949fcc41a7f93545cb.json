{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\nconst updateAuthToken = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n  }\n};\n\n// Initialize auth header\nupdateAuthToken();\n\n// Add request interceptor\napi.interceptors.request.use(config => {\n  // Update token before each request\n  updateAuthToken();\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor for 401 errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Clear token and redirect to login on authentication error\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","updateAuthToken","token","localStorage","getItem","defaults","common","interceptors","request","use","config","error","Promise","reject","response","_error$response","status","removeItem","window","location","href"],"sources":["/home/deepesh/Desktop/kubernetes-vulnerability/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if it exists\nconst updateAuthToken = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n  }\n};\n\n// Initialize auth header\nupdateAuthToken();\n\n// Add request interceptor\napi.interceptors.request.use(\n  (config) => {\n    // Update token before each request\n    updateAuthToken();\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for 401 errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Clear token and redirect to login on authentication error\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTL,GAAG,CAACQ,QAAQ,CAACL,OAAO,CAACM,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUJ,KAAK,EAAE;EAClE,CAAC,MAAM;IACL,OAAOL,GAAG,CAACQ,QAAQ,CAACL,OAAO,CAACM,MAAM,CAAC,eAAe,CAAC;EACrD;AACF,CAAC;;AAED;AACAL,eAAe,CAAC,CAAC;;AAEjB;AACAJ,GAAG,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACAT,eAAe,CAAC,CAAC;EACjB,OAAOS,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACU,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAb,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}